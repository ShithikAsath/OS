#include <stdio.h>

#define MAX 25

int main() {
    int frag[MAX], b[MAX], f[MAX], bf[MAX], ff[MAX];
    int i, j, nb, nf, temp;
    
    // Initialize block flags
    for (i = 0; i < MAX; i++) {
        bf[i] = 0;
    }

    printf("\n\tMemory Management Scheme - Worst Fit");

    // Input number of blocks
    printf("\nEnter the number of blocks: ");
    scanf("%d", &nb);

    // Input number of files
    printf("Enter the number of files: ");
    scanf("%d", &nf);

    // Input size of each block
    printf("\nEnter the size of the blocks:-\n");
    for (i = 0; i < nb; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &b[i]);
    }

    // Input size of each file
    printf("Enter the size of the files:\n");
    for (i = 0; i < nf; i++) {
        printf("File %d: ", i + 1);
        scanf("%d", &f[i]);
    }

    // Worst fit allocation
    for (i = 0; i < nf; i++) {
        int worst_index = -1;
        for (j = 0; j < nb; j++) {
            if (!bf[j]) {  // if block is not already allocated
                temp = b[j] - f[i];
                if (temp >= 0) {
                    if (worst_index == -1 || temp > (b[worst_index] - f[i])) {
                        worst_index = j;
                    }
                }
            }
        }

        if (worst_index != -1) {
            ff[i] = worst_index;
            frag[i] = b[worst_index] - f[i];
            bf[worst_index] = 1;
        } else {
            ff[i] = -1;
            frag[i] = -1;
        }
    }

    // Output allocation details
    printf("\nFile_no:\tFile_size:\tBlock_no:\tBlock_size:\tFragment\n");
    for (i = 0; i < nf; i++) {
        if (ff[i] != -1) {
            printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, f[i], ff[i] + 1, b[ff[i]], frag[i]);
        } else {
            printf("%d\t\t%d\t\tNot Allocated\t\tN/A\t\tN/A\n", i + 1, f[i]);
        }
    }

    return 0;
}
